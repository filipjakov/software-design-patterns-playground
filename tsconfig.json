{
  "compilerOptions": {
    // Allow JavaScript files to be compiled.
    // Type: boolean -> default: false
    "allowJs": false,

    // Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
    // Type: boolean -> default: module === "system" or --esModuleInterop
    // "allowSyntheticDefaultImports": false,

    // Allow accessing UMD globals from modules.
    // Type: boolean -> default: false
    // "allowUmdGlobalAccess": false,

    // Do not report errors on unreachable code.    
    // Type: boolean -> default: false
    "allowUnreachableCode": false,

    // Do not report errors on unused labels.
    // Type: boolean -> default: false
    "allowUnusedLabels": false,

    // Parse in strict mode and emit "use strict" for each source file.
    // Type: boolean -> default: false
    "alwaysStrict": true,

    // Base directory to resolve non-relative module names. See https://www.typescriptlang.org/docs/handbook/module-resolution.html#base-url 
    // Type: string -> default:
    // "baseUrl": ""

    // The character set of the input files.
    // Type: string -> default: "utf-8"
    "charset": "utf8",

    // Report errors in .js files. Use in conjunction with --allowJs.
    // Type: boolean -> default: false
    "checkJs": false,

    // Ensure TypeScript can determine where to find the outputs of the referenced project to compile project.
    // Type: boolean -> default: false
    "composite": false,

    // Generate correspoding ‘.d.ts’ file
    // Type: boolean -> default: false
    // "declaration": true,

    // Output directory for generated declaration files.
    // Type: string -> default:
    // "declarationDir": "",

    // Generates a sourcemap for each corresponding ‘.d.ts’ file.
    // Type: boolean -> default: false
    // "declarationMap": true,

    // Show diagnostics information.
    // Type: boolean -> default: false
    "diagnostics": true,

    // Disable size limitation on JavaScript project.
    // Type: boolean -> default: false
    "disableSizeLimit": false,

    // Provide full support for iterables in for..of, spread and destructuring when targeting ES5 or ES3.
    // Type: boolean -> default: false
    "downlevelIteration": true,

    // Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.
    // Type: boolean -> default: false
    "emitBOM": false,

    // Only emit ‘.d.ts’ declaration files.
    // Type: boolean -> default: false
    "emitDeclarationOnly": false,

    // Emit design-type metadata for decorated declarations in source
    // Type: boolean -> default: false
    // EXPERIMENTAL
    "emitDecoratorMetadata": false,

    // Emit __importStar and __importDefault helpers for runtime babel ecosystem compatibility
    // and enable --allowSyntheticDefaultImports for typesystem compatibility.
    // Type: boolean -> default: false
    "esModuleInterop": false,

    // Enables experimental support for ES decorators.
    // Type: boolean -> default: false
    // EXPERIMENTAL
    "experimentalDecorators": true,

    // Disallow inconsistently-cased references to the same file.
    // Type: boolean -> default: false
    "forceConsistentCasingInFileNames": false,

    // Import emit helpers (e.g. __extends, __rest, etc..) from tslib
    // Type: boolean -> default: false
    "importHelpers": false,

    // Enable incremental compilation by reading/writing information from prior compilations to a file on disk.
    // This file is controlled by the --tsBuildInfoFile flag.
    // Type: boolean -> default: true if composite is on, false otherwise	
    // "incremental": true,

    // Emit a single file with source maps instead of having a separate file.
    // Type: boolean -> default: false
    "inlineSourceMap": false,

    // Emit the source alongside the sourcemaps within a single file; 
    // requires --inlineSourceMap or --sourceMap to be set.
    // Type: boolean -> default: false
    "inlineSources": false,

    // Transpile each file as a separate module (similar to “ts.transpileModule”).
    // Type: boolean -> default: false
    "isolatedModules": false,

    "jsx": "preserve",
    "jsxFactory": "React.createElement",

    // Resolve keyof to string valued property names only (no numbers or symbols).
    "keyofStringsOnly": false,

    // List of library files to be included in the compilation.
    // Possible values -> https://www.typescriptlang.org/docs/handbook/compiler-options.html
    // "lib": [],

    // Print names of generated files part of the compilation.
    // Type: boolean -> default: false    
    "listEmittedFiles": true,

    // Print names of files part of the compilation.
    // Type: boolean -> default: false    
    "listFiles": true,

    // Specifies the location where debugger should locate map files instead of generated locations.
    // Use this flag if the .map files will be located at run-time in a different location than the .js files.
    // The location specified will be embedded in the sourceMap to direct the debugger where the map files will be located. 
    // This flag will not create the specified path and generate the map files in that location. 
    // Instead, create a post build step that moves the files to the specified path.
    // Type: string -> default:
    // "mapRoot": "",

    // The maximum dependency depth to search under node_modules and load JavaScript files. Only applicable with --allowJs.
    // Type: number -> default: 0
    "maxNodeModuleJsDepth": 0,

    // Specify module code generation: "None", "CommonJS", "AMD", "System", "UMD", "ES6", "ES2015" or "ESNext".
    // Only "AMD" and "System" can be used in conjunction with --outFile.
    // "ES6" and "ES2015" values may be used when targeting "ES5" or lower.
    // Type: boolean -> default: target === "ES3" or "ES5" ? "CommonJS" : "ES6"
    "module": "commonjs",

    // Determine how modules get resolved. Either "Node" for Node.js/io.js style resolution, or "Classic".
    // See Module Resolution documentation (https://www.typescriptlang.org/docs/handbook/module-resolution.html) for more details.
    // Type: string -> default: module === "AMD" or "System" or "ES6" ? "Classic" : "Node"
    "moduleResolution": "node",

    // "newLine": "",
    // Do not emit outputs.
    // Type: boolean -> default: false        
    "noEmit": false,

    // Do not generate custom helper functions like __extends in compiled output.
    // Type: boolean -> default: false
    "noEmitHelpers": false,

    // Do not emit outputs if any errors were reported.
    // Type: boolean -> default: false
    "noEmitOnError": false,

    // Do not truncate error messages
    // Type: boolean -> default: false    
    "noErrorTruncation": false,

    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noImplicitUseStrict": false,

    // Do not include the default library file (lib.d.ts).
    // Type: boolean -> default: false    
    "noLib": false,

    // Do not add triple-slash references or module import targets to the list of compiled files.
    // Type: boolean -> default: false
    "noResolve": false,

    "noStrictGenericChecks": false,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    // "outDir": "./dist",
    // Only with node resolution strategy
    "resolveJsonModule": false,
    "sourceMap": true,
    "strict": true,
    "strictBindCallApply": true,
    "strictFunctionTypes": true,
    "strictNullChecks": true,
    "target": "es5",
    // Report module resolution log messages.
    "traceResolution": true,
    "types": []
  },
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "node_modules",
    "**/*.spec.ts"
  ]
}
